#!/usr/bin/perl -w
#
# Daybo Logic Podcast downloader
# Copyright (c) 2012-2013, David Duncan Ross Palmer, Daybo Logic
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#
#     * Redistributions of source code must retain the above copyright notice,
#       this list of conditions and the following disclaimer.
#
#     * Redistributions in binary form must reproduce the above copyright
#       notice, this list of conditions and the following disclaimer in the
#       documentation and/or other materials provided with the distribution.
#
#     * Neither the name of the Daybo Logic nor the names of its contributors
#       may be used to endorse or promote products derived from this software
#       without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
# LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
# INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
# CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.

package main;
use LWP::UserAgent;
use XML::Feed;
use Data::Dumper;
use Config::IniFiles;
use Getopt::Std;
use URI::Escape;
use IO::Interactive qw(is_interactive);
use DBI;
use POSIX ":sys_wait_h";

use strict;
use warnings;
use diagnostics;

my $Debug = 0;

sub FileFromURI($)
{
	my $Url = shift;
	return undef if ( !$Url );
	my @uri_parts = split('/', $Url);
	return $uri_parts[-1];
}

sub ReadFeed($$)
{
	my @entries = ( );
	my ( $Feeds, $Feed ) = @_;
	my ( $Url, $Name ) = ( $Feed->{rss}, $Feed->{name} );
	my $feed = XML::Feed->parse(URI->new($Url));
	if ( !$feed ) {
		printf(STDERR "Stream %s error: %s\n", $Name, $@);
		return @entries;
	}

	foreach my $entry ($feed->entries) {
		my $enclosure = $entry->{'entry'}->{'enclosure'};
		my $uriDecoded = uri_unescape($enclosure->{'url'});
		my $filename = FileFromURI($uriDecoded);
		push(@entries, {
			filename => $filename,
			uri      => $uriDecoded,
			title    => $entry->title,
			type     => $enclosure->{'type'},
			length   => $enclosure->{'length'}
		}) if ( $filename );
	}
	return @entries;
}

sub DownloadStream($$$)
{
	my ( $ua, $f, %get_params, $is_interactive );
	my $local_length = 0;
	my ( $Feeds, $entry, $Name ) = @_;
	my $local_podcast = $Feeds->{$Name}->{localpath} . '/' . $entry->{filename};
	if ( -f $local_podcast ) {
		$local_length = (stat($local_podcast))[7];
		if ( !$entry->{length} || $local_length == $entry->{length} ) {
			printf(STDERR "%s already exists\n", $local_podcast);
			return;
		}
	}
	$is_interactive = is_interactive();
	$ua = LWP::UserAgent->new( show_progress => $is_interactive );
	printf(STDERR "Downloading %s ... ", $entry->{uri}) if ( !$is_interactive );

	unless ( $Feeds->{main}->{NOOP} ) {
		if ( open($f, '>>:raw', $local_podcast) ) {
			binmode($f);
		} else {
			printf(STDERR "Local failure on stream %s -- %s: %s\n", $Name, $local_podcast, $!);
			return;
		}
	}
	%get_params = (
		'Range' => "bytes=$local_length-"
	) if ( $local_length );
	$ua->get(
		$entry->{uri},
		%get_params,
		':content_cb' => sub {
			my ( $chunk ) = @_;
			print $f $chunk unless ( $Feeds->{main}->{NOOP} );
		}
	);
	close($f) if ( !$Feeds->{main}->{NOOP} );
	printf(STDERR "done.\n") if ( !$is_interactive );
}

sub ProcessTags($$)
{
	my ( $Feeds, $V ) = @_;
	my $tagRx = qr/^\$([A-Z0-9]+)/o;
	my $avoid = 0;
	while ( (my $idx = index($V, '$', $avoid)) > -1 ) { # Find remaining user-variable references
		my $var = substr($V, $idx);
		if ( $var =~ $tagRx ) {
			my $v = $Feeds->{main}->{ uc($1) };
			warn(sprintf('%s -> %s', $1, $v || '(undef)')) if ( $Debug );
			if ( !defined($v) ) {
				$avoid = $idx+1;
				next;
			}
			substr($V, $idx, length($1)+1, $v);
		} else {
			$avoid++;
		}
	}
	return $V;
}

sub Child($$)
{
	my ( $Feeds, $Feed ) = @_;
	my @entries = ReadFeed($Feeds, $Feed);
	foreach my $entry ( @entries ) {
		print STDERR 'Processing entry: ' . Dumper $entry if ( $Debug );
		DownloadStream($Feeds, $entry, $Feed->{name});
	}
}

sub DB() {
	my $dbh = DBI->connect("DBI:SQLite:$ENV{HOME}/.dlpodget.db");
	if ( $dbh ) {
		$dbh->do(
			'CREATE TABLE IF NOT EXISTS feeds (
				id INTEGER PRIMARY KEY, name char(16), last_check_t DATETIME
			)'
		);
		$dbh->do(
			'CREATE TABLE IF NOT EXISTS streams (
				id INTEGER PRIMARY KEY, feed_id INTEGER, remotefn CHAR(32),
				localfn CHAR(32), INTEGER remotelen
			)'
		);
	}
	return $dbh;
}

sub main()
{
	my $proctitle = $0; # Save original process title
	my $conf;
	my @entries = ( );
	my @defKeys;
	my %feeds = ( );
	my %opts = ( );
	my %pids;
	my @confFiles = (
		'dlpodget.rc',
		"$ENV{HOME}/.dlpodget.rc"
	);

	return 1 if ( !getopts('dn:', \%opts) );
	$Debug = 1 if ( $opts{'d'} );
	print(STDERR "Explicit debug mode enabled by -d\n") if ( $Debug );

	foreach my $confFile ( @confFiles ) {
		next unless ( -f $confFile );
		$conf = Config::IniFiles->new(-file => $confFile, -commentchar => ';');
		if ( !$conf ) {
			print(STDERR "Fault with $confFile: " . join(',', @Config::IniFiles::errors) . "\n");
			return 1;
		}
		last;
	}

	if ( $conf && (@defKeys = $conf->Parameters('main')) ) {
		if ( !$conf->val('main', 'enable', 1) ) {
			print(STDERR "Configuration disabled.\n");
			$conf = undef;
		}
	}
	if ( $conf ) {
		my %reserveSec = map {  $_ => 1 } ( 'main', 'paths' ); # Reserved section names
		my ( @sections, $secC );
		@sections = $conf->Sections();
		$secC = scalar(@sections);

		# First load the generation configuration information
		# Include environment variables.
		foreach my $ek ( keys(%ENV) ) {
			$feeds{main}->{ uc($ek) } = $ENV{$ek};
		}
		if ( scalar(@defKeys) ) {
			foreach my $mk ( @defKeys ) {
				$feeds{main}->{ uc($mk) } = ProcessTags(\%feeds, $conf->val('main', $mk));
			}
			# Set debug flag via config if it existed.
			if ( $feeds{main}->{DEBUG} ) {
				$Debug = $feeds{main}->{DEBUG};
				printf(STDERR "Set Debug via config: %s\n", $Debug);
			}
		}

		if ( 'paths' ~~ @sections ) { # Has a paths section?
			my @secKeys;
			if ( (@secKeys = $conf->Parameters('paths')) ) {
				foreach my $pk ( @secKeys ) {
					$feeds{main}->{ uc($pk) } = $conf->val('paths', $pk);
				}
				# For backward compatibility, set localpfx with [paths] root
				$feeds{main}->{'LOCALPFX'} = $feeds{main}->{'ROOT'}
					if ( $feeds{main}->{'ROOT'} );
			}
		}

		for ( my $secI = 0; $secI < $secC; $secI++ ) {
			my ( @secKeys, $keyC );
			next if ( $opts{'n'} && $sections[$secI] ne $opts{'n'} );
			@secKeys = $conf->Parameters($sections[$secI]);
			$keyC = scalar(@secKeys);
			foreach ( my $keyI = 0; $keyI < $keyC; $keyI++ ) {
				next if ( $reserveSec{$sections[$secI]} ); # Skip reserved sections
				my $v = $conf->val($sections[$secI], $secKeys[$keyI]);
				$v = ProcessTags(\%feeds, $v);
				printf(
					STDERR
					'[%s] %s -> %s'."\n",
					$sections[$secI],
					$secKeys[$keyI],
					$v
				) if ( $Debug );
				$feeds{ $sections[$secI] }->{ $secKeys[$keyI] } = $v;
			}
		}
	}

	$0 = "$proctitle [MASTER]" if ( $feeds{main}->{MAXCHILDREN} != 0 );
	my $db = DB();
	foreach my $feedName ( keys(%feeds) ) {
		my $reaped_pid;
		my $child_limit_reached = 0;
		my $feed = $feeds{$feedName};
		next if ( !$feed->{enable} );
		next if ( !$feed->{download} );
		$feed->{name} = $feedName;
		if ( $feeds{main}->{MAXCHILDREN} == 0 ) { # Master performs downloads
			$0 = "$proctitle [$feedName]";
			Child(\%feeds, $feed);
			next;
		} elsif ( $feeds{main}->{MAXCHILDREN} < 0 || scalar(keys(%pids)) < $feeds{main}->{MAXCHILDREN} ) {
			my $pid = fork();
			die "cannot fork: $!" if ( !defined($pid) );
			if ( $pid == 0 ) { # Child process
				$0 = "$proctitle [$feedName]";
				Child(\%feeds, $feed);
				exit(0); # Children should not return
			} else {
				$pids{$pid} = $feedName;
			}
		} else {
			warn "Pending (child limit reached).";
			$child_limit_reached = 1;
		}

		if ( $child_limit_reached ) {
			$reaped_pid = wait();
		} else {
			$reaped_pid = waitpid(-1, WNOHANG); # Any children finished?
			next if ( $reaped_pid <= 0 ); # No, carry on.
		}

		# A child returned, remove it from the PID list
		die 'Internal error' if ( !exists($pids{$reaped_pid}) );
		delete($pids{$reaped_pid});

		redo if ( $child_limit_reached );
	}
	while ( scalar(keys(%pids)) ) {
		my $pid = wait();
		last if ( $pid == -1 );
		delete($pids{$pid});
	}

	return 0;
}

exit(main());
