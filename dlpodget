#!/usr/bin/perl -w

package main;
use LWP::Simple qw(get);
use XML::Feed;
use Data::Dumper;
use Daybo::ConfReader;
use Getopt::Std;
use strict;
use warnings;
use diagnostics;

use constant LOCAL_STORE_PATH => 'podcasts';

my $Debug = 0;

sub FileFromURI($)
{
	my $Url = shift;
	my @uri_parts = split('/', $Url);
	return $uri_parts[-1];
}

sub ReadStream($)
{
	my $Url = shift;

	my $feed = XML::Feed->parse(URI->new($Url));

	foreach my $podcast ($feed->entries) {
		my $data;
		my $filename = FileFromURI($podcast->link);
		my $local_podcast = LOCAL_STORE_PATH() . '/' . $filename;
		if ( -f $local_podcast ) {
			printf(STDERR "%s already exists\n", $local_podcast);
			next;
		}
		printf(STDERR "Downloading %s ... ", $podcast->link);
		$data = get($podcast->link);
		print(STDERR "done.\n");

		printf(STDERR "\nWriting %s ... ", $local_podcast);
		if ( open(my $f, '>', $local_podcast) ) {
			binmode($f);
			print($f $data);
			close($f);
			print(STDERR "done.\n");
		} else {
			printf(STDERR "Failed -- %s\n", $!);
		}
	}

}

sub ProcessTags($$)
{
	my ( $Feeds, $V ) = @_;
	foreach my $c ( keys(%{ $Feeds->{_main} }) ) {
		my $ucc = '$' . uc($c);
		while ( my $idx = index($V, $ucc) > -1 ) {
			substr($V, $idx-1, length($ucc), $Feeds->{_main}->{$c});
		}
	}
	return $V;
}

sub main()
{
	my $conf;
	my @defKeys;
	my %feeds = ( );
	my %opts = ( );
	my $confSeen = 0;
	my @confFiles = (
		'dlpodget.rc',
		"$ENV{HOME}/.dlpodget.rc"
	);

	return 1 if ( !getopts('d', \%opts) );
	$Debug = 1 if ( $opts{'d'} );
	print(STDERR "Explicit debug mode enabled by -d\n") if ( $Debug );

	$conf = Daybo::ConfReader->new();
	foreach my $confFile ( @confFiles ) {
		next unless ( -f $confFile );
		if ( $conf->SetFn($confFile) ) {
			$conf->Reload();
			$confSeen++;
			last;
		}
	}
	$conf = undef if ( !$confSeen );

	if ( $conf && $conf->GetKeys(undef, \@defKeys) ) {
		if ( 'enable' ~~ @defKeys ) {
			if ( !$conf->GetDatum(undef, 'enable') ) {
				print(STDERR "Configuration disabled.\n");
				$conf = undef;
			}
		}
	}
	if ( $conf ) {
		my ( @sections, $secC, @mainKeys );
		$secC = $conf->GetSections(\@sections);

		# First load the generation configuration information
		$feeds{_main} = { %ENV }; # Include environment variables.
		if ( $conf->GetKeys(undef, \@mainKeys) ) {
			foreach my $mk ( @mainKeys ) {
				$feeds{_main}->{$mk} = $conf->GetDatum(undef, $mk);
			}
			# Set debug flag via config if it existed.
			if ( defined($feeds{_main}->{debug}) ) {
				$Debug = $feeds{_main}->{debug};
				printf(STDERR "Set Debug via config: %s\n", $Debug) if ( $Debug );
			}
		}

		for ( my $secI = 0; $secI < $secC; $secI++ ) {
			my @secKeys;
			my $keyC = $conf->GetKeys($sections[$secI], \@secKeys);
			foreach ( my $keyI = 0; $keyI < $keyC; $keyI++ ) {
				next if ( $sections[$secI] eq '_main' ); # Skip reserved section
				my $v = $conf->GetDatum($sections[$secI], $secKeys[$keyI]);
				$v = ProcessTags(\%feeds, $v);
				printf(
					STDERR
					'[%s] %s -> %s'."\n",
					$sections[$secI],
					$secKeys[$keyI],
					$v
				) if ( $Debug );
				$feeds{ $sections[$secI] }->{ $secKeys[$keyI] } = $v;
			}
		}
	}

	foreach my $feedName ( keys(%feeds) ) {
		my $feed = $feeds{$feedName};
		next if ( !$feed->{enable} );
		next if ( !$feed->{download} );
		ReadStream($feed->{rss});
	}

	print Dumper \%feeds;
	return 0;
}

exit(main());
